// Mocks generated by Mockito 5.4.1 from annotations
// in muopener/test/widget_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:muopener/api.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [OpenerApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenerApi extends _i1.Mock implements _i2.OpenerApi {
  MockOpenerApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: '',
      ) as String);
  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get hmac_key => (super.noSuchMethod(
        Invocation.getter(#hmac_key),
        returnValue: '',
      ) as String);
  @override
  set hmac_key(String? _hmac_key) => super.noSuchMethod(
        Invocation.setter(
          #hmac_key,
          _hmac_key,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get device_info => (super.noSuchMethod(
        Invocation.getter(#device_info),
        returnValue: '',
      ) as String);
  @override
  set device_info(String? _device_info) => super.noSuchMethod(
        Invocation.setter(
          #device_info,
          _device_info,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get port => (super.noSuchMethod(
        Invocation.getter(#port),
        returnValue: 0,
      ) as int);
  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init(
    dynamic host,
    dynamic port,
    dynamic hmac_key,
    dynamic device_info,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [
            host,
            port,
            hmac_key,
            device_info,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<String> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i4.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> write({
    required String? key,
    required String? value,
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<String?> read({
    required String? key,
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<bool> containsKey({
    required String? key,
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> delete({
    required String? key,
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<Map<String, String>> readAll({
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i3.Future<Map<String, String>>);
  @override
  _i3.Future<void> deleteAll({
    _i4.IOSOptions? iOptions = _i4.IOSOptions.defaultOptions,
    _i4.AndroidOptions? aOptions,
    _i4.LinuxOptions? lOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
